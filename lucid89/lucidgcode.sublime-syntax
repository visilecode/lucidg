%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - ec
scope: text.example-c

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: cordinates
    - include: numbers
    - include: strings

  cordinates:

    # Matches cord.-let. and number with individual scope.
    - match: '(X|Y|Z)'
      scope: keyword.control.base-cord-iso
      push: and_number

  and_number:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.example-c
    - match: '\d*'
      scope: entity.name.class
      pop: true

# Matches number with no cord.-let. and lights - +
  numbers:
    - match: '(-)?[0-9.]+' # + does what?
      scope: constant.numeric.example-c

  strings:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character.
    - match: '"'
      scope: punctuation.definition.string.begin.example-c
      push: inside_strings

  inside_strings:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.example-c
    - match: '\.'
      scope: constant.character.escape.example-c
    - match: '"'
      scope: punctuation.definition.string.end.example-c
      pop: true

  comments:
    # Commets starts/ends with (). Only content inside brackets will comented.
    - match: '\('
      scope: punctuation.definition.string.begin.example-c
      push: inside_comments

  inside_comments:
    - meta_include_prototype: false
    - meta_scope: comment.brackets.double-slash.example-c
    - match: '\.' #actual commment
      scope: constant.character.escape.example-c
    - match: '\)' #end of comment
      scope: punctuation.definition.string.end.example-c
      pop: true


#https://macromates.com/manual/en/language_grammars https://regexr.com ([(')])(?:(?=(\?))\2.)*?
#\((.*?)\)  (X4) ()

